#include <stdio.h>  
#include <stdlib.h>  
#include <string.h>  
#include <unistd.h>  
#include<sys/types.h>  
#include<sys/socket.h>  
#include<netinet/in.h>  
#include<arpa/inet.h>  
#include<sys/time.h>  
#define PORT 1234  
#define BACKLOG 5  
#define MAXDATASIZE  1000  
typedef struct {  
int fd;  
char  *name;  
struct  sockaddr_in   addr;  
char *data;  
}CLIENT;  
void  process_cli(CLIENT  *client, char* recvbuf, int len);  
void savedata(char*recvbuf, int len, char* data);  
  
int main()  
{  
int i, maxi,maxfd,sockfd;  
int nready;  
ssize_t  n;  
fd_set  rset, allset; //定义描述字集 
int listenfd,connectfd;  
struct sockaddr_in  server;  
CLIENT  client[FD_SETSIZE];  
char recvbuf[MAXDATASIZE];  
socklen_t  sin_size;  
  
if ((listenfd =socket(AF_INET, SOCK_STREAM, 0)) == -1) {  
perror("Creatingsocket failed.");  
exit(1);  
}  
  
int opt =SO_REUSEADDR;  
setsockopt(listenfd,SOL_SOCKET, SO_REUSEADDR, &opt, sizeof(opt));  
  
bzero(&server,sizeof(server));  
server.sin_family=AF_INET;  
server.sin_port=htons(PORT);  
server.sin_addr.s_addr= htonl (INADDR_ANY);  
if (bind(listenfd,(struct sockaddr *)&server, sizeof(struct sockaddr)) == -1) {  
perror("Bind()error.");  
exit(1);  
}  
  
if(listen(listenfd,BACKLOG)== -1){  
perror("listen()error\n");  
exit(1);  
}  
  
sin_size=sizeof(struct   sockaddr_in);  
maxfd = listenfd;  
maxi = -1;  
for (i = 0; i <FD_SETSIZE; i++) { //宏 FD_SETSIZE声明在一个进程中select能够操作的文件描述符的最大数目
client[i].fd =-1; //将每个文件描述符设置为-1 
}  
FD_ZERO(&allset);  //初始化allset字集
FD_SET(listenfd,&allset);//设置监听套接字为1  
  
while(1)  
{  
struct sockaddr_in   addr;  
rset = allset;  
nready =select(maxfd+1, &rset, NULL, NULL, NULL);//调用select函数，返回值为0或者-1  
  
if(FD_ISSET(listenfd, &rset)) {  //检测监听套接字是否为1
if ((connectfd =accept(listenfd,(struct sockaddr *)&addr,&sin_size))==-1) {  
perror("accept() error\n");  
continue;  
}  
for (i = 0; i <FD_SETSIZE; i++)  
if(client[i].fd < 0) {  //保存客户信息
client[i].fd = connectfd;  
client[i].name = malloc(MAXDATASIZE* sizeof(char));  
client[i].addr = addr;  
client[i].data = malloc(MAXDATASIZE* sizeof(char));  
client[i].name[0] = '\0';  
client[i].data[0] = '\0';  
printf("You got a connection from %s. ",inet_ntoa(client[i].addr.sin_addr) );  
break;  
}  
if (i ==FD_SETSIZE) printf("too many clients\n");  
FD_SET(connectfd, &allset);  
if (connectfd> maxfd) maxfd = connectfd;  
if (i >maxi) maxi = i;  
if (--nready<= 0) continue;  //判断是否有连接
}  
  
for (i = 0; i <=maxi; i++) {  
if ( (sockfd= client[i].fd) < 0) continue;  
if(FD_ISSET(sockfd, &rset)) {  
if ( (n =recv(sockfd, recvbuf, MAXDATASIZE,0)) == 0) {  //接收客户传过来的信息
close(sockfd);  
printf("Client( %s ) closed connection. User's data:%s\n",client[i].name,client[i].data);  
FD_CLR(sockfd, &allset);  //设置套接字为0
client[i].fd = -1;  
free(client[i].name);  
free(client[i].data);  
}  
else  
process_cli(&client[i], recvbuf, n);  
if(--nready <= 0) break;  
}  
}  
}  
close(listenfd);  
}  
  
void process_cli(CLIENT *client, char* recvbuf, int len)  
{  
	char  sendbuf[MAXDATASIZE],buf[MAXDATASIZE];  
	recvbuf[len-1] ='\0';  
	if(strlen(client->name) == 0) {  
	memcpy(client->name,recvbuf, len);  
	printf("Client'sname is %s.\n",client->name);  
	return;  
	}  
	  
	printf("Receivedclient( %s ) message: %s\n",client->name, recvbuf);  
	savedata(recvbuf,len,client->data);  

	int i1;
	for ( i1 = 0; i1< len - 1; i1++) {  
	buf[i1] =recvbuf[len - i1 -2];  
	} 
		int number[] = {2,0,1,6,1,2,1,0,0,7};
		int buflen = len-1;
		int numberlen = sizeof(number)/sizeof(number[0]);
		if(buflen%numberlen != 0)//是否是加密字符长度的倍数
		{
			while(buflen%numberlen != 0)//添0使之成为长度的倍数
			{
				buf[buflen] = '0';
				buflen++;
			}
		}
		buf[buflen]='\0';
		puts(buf);
		int i;								
		for( i=0;i<buflen;i++)//对每个字符进行操作
		{												
			if((buf[i] <= 'z' && buf[i] >= 'a') || (buf[i] >= 'A' && buf[i] <= 'Z'))
			{
				buf[i] = buf[i] + number[i%numberlen];	//先将字符加密	
				if((buf[i] > 'Z' && buf[i] <= 'Z'+number[i%numberlen]) || (buf[i] > 'z'))//保证加密的密文也为字母
				{					
					buf[i] = buf[i] - 26;
				}				
			}else
			{	
				buf[i] = buf[i] + number[i%numberlen];				
				if(buf[i] > '9')//保证加密过后的数字依旧是数字，加密的数字超过十取余数
					buf[i] = buf[i] - 10;
			}
			
			sendbuf[i] = buf[i];
						
		}

	
	puts(buf);	
	sendbuf[buflen] ='\0';  
	puts(sendbuf);		  
	send(client->fd,sendbuf,strlen(sendbuf),0);  
}  
  
void savedata(char  *recvbuf, int len, char   *data)  
{ 
int start;
 int i;
 start =strlen(data);  
for ( i = 0; i <len; i++) {  
data[start + i]= recvbuf[i];  
}  
}  